"DAG – Directed Acyclic Graph",
"-Graph without cycles",
"-Good for modeling processes & structures with partial order",
"--a > b & b > c &rArr; a > c",
"--Not all orders are in graph",
"-Can always make total order (valid comparison for all unique item pairs) from partial order (may not be unique; but is existing)",
"-Lemma 1 – directed graph G is acyclic iff a DFS of G yields no back edges",
"DAG to list – finding valid total order",
"-Use DFS with timestamps (starting from any node)",
"-Add item to the front of the list when it is finished",
"-You will notice that the finishing time is strictly decreasing",
"-Correctness proof – if (u, v) &isin; E, then f[v] < f[u]",
"SCC – Strongly Connected Components",
"-G is strongly connected if every pair (u, v) &isin; G is reachable from one another",
"-Is a maximal set of vertices C &sube; V such that &forall; u, v &isin; C, u &rarrw; v & v &rarrw; u exist",
"Component Graph",
"-G<sup>SCC</sup> = (V<sup>SCC</sup>, E<sup>SCC</sup>)",
"-V<sup>SCC</sup> has one vertex for each SCC in G",
"-E<sup>SCC</sup> has an edge if there is an edge between the corresponding SCC’s in G",
"G<sup>SCC</sup> is a DAG",
"Lemma 2 – for two distinct SCC’s in G, if there is a path connecting SCC<sub>1</sub> to SCC<sub>2</sub>, there cannot be a path connecting SCC<sub>2</sub> to SCC<sub>1</sub><br>Otherwise, they will not be separate SCC’s",
"Transpose of Directed Graph",
"-G<sup>T</sup> = transpose of directed G",
"--G<sup>T</sup> = (V, E<sup>T</sup>), E<sup>T</sup> = {(u, v): (v, u) &isin; E}",
"--G<sup>T</sup> is G with all edges reversed",
"-Creation time of &Theta;(V + E) using adjacency lists",
"-G & G<sup>T</sup> have same SCC’s",
"SCC Algorithm",
"-SCC(G) – &Theta;(V + E)",
"-Call DFS(G) to find f[u] for all u",
"-Compute G<sup>T</sup>",
"-Call DFS(G<sup>T</sup>) using decreasing f[u] order (found in first DFS)",
"-Output vertices in each tree of the depth-first forest formed in second DFS as separate SCC",
"-Works because we are visiting vertices of component graph in topologically sorted order",
"--Running DFS on G<sup>T</sup> means we will not visit any v from u where v & u are in different components",
"-Lemma 3 – let C & C’ be distinct SCC’s in G = (V, E); if (u, v) &isn; E &cap; u &isin; C &cap; v &isin; C’, then f(C) > f(C’)",
"--Corollary – if (u, v) &isin; E<sup>T</sup>, f(C) < f(C’) ",
